#!/usr/bin/env python3

from enum import Enum, auto
from os import walk
from typing import Optional
from pathlib import Path

import git
import typer
from rich import print
from rich.table import Table

BRANCH_SYMBOL = ""
CLEAN_MARK = "✔"
NO_REPO_MARK = "✘"
DIRTY_MARK = "󰃢"  # ""
UNTRACKED_MARK = ""
UNPUSHED_MARK = "⇡"


class DirectoryStatus(Enum):
    NoRepo = auto()
    Dirty = auto()
    UntrackedFiles = auto()
    NoRemote = auto()
    UnpushedCommits = auto()
    Clean = auto()


def directory_status(directory: Path) -> tuple[DirectoryStatus, Optional[str]]:
    """
    Checks the status of all local branches.

    Returns clean if all branches are clean.
    """
    try:
        repo = git.Repo(directory)

    except git.InvalidGitRepositoryError:
        return DirectoryStatus.NoRepo, None

    status = branch_status(repo)

    if status is not DirectoryStatus.Clean:
        return status, repo.active_branch.name

    for branch in repo.branches:
        status = branch_status(repo, branch)

        if status is not DirectoryStatus.Clean:
            return status, branch.name

    return DirectoryStatus.Clean, None


def branch_status(repo: git.Repo, branch: Optional[git.Head] = None) -> DirectoryStatus:
    if branch:
        branch.checkout()
    else:
        branch = repo.active_branch

    if repo.is_dirty():
        return DirectoryStatus.Dirty

    if repo.untracked_files:
        return DirectoryStatus.UntrackedFiles

    upstream = branch.tracking_branch()

    if upstream is None:
        return DirectoryStatus.NoRemote

    if int(repo.git.rev_list("--count", f"{branch.name}..{upstream.name}")) > 0:
        return DirectoryStatus.UnpushedCommits

    return DirectoryStatus.Clean


def main(
    path: str = ".",
    # depth: int = 1,
):
    """List the git status of all subdirectories of the current working directory."""

    directory = Path(path) if path else Path.cwd()

    if not directory.is_dir():
        raise FileNotFoundError(f"{path} is not a directory")

    table = Table(box=None)

    for d in directory.iterdir():
        if not d.is_dir():
            continue

        status, branch = directory_status(d)

        statuses = {
            DirectoryStatus.NoRepo: (NO_REPO_MARK, "red", "no repo"),
            DirectoryStatus.NoRemote: (
                NO_REPO_MARK,
                "red",
                f"no remote for {BRANCH_SYMBOL} {branch}",
            ),
            DirectoryStatus.Dirty: (
                DIRTY_MARK,
                "yellow",
                f"dirty tree on {BRANCH_SYMBOL} {branch}",
            ),
            DirectoryStatus.UntrackedFiles: (
                UNTRACKED_MARK,
                "yellow",
                f"untracked files on {BRANCH_SYMBOL} {branch}",
            ),
            DirectoryStatus.UnpushedCommits: (
                UNPUSHED_MARK,
                "yellow",
                f"ahead of remote",
            ),
            DirectoryStatus.Clean: (CLEAN_MARK, "green", ""),
        }

        symbol, color, description = statuses[status]

        table.add_row(f"[{color}]{symbol} {d}", f"[{color}]{description}")

    print(table)


if __name__ == "__main__":
    typer.run(main)
